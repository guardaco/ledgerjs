{"version":3,"sources":["../src/TransportWebBLE.js"],"names":["ServiceUuid","WriteCharacteristicUuid","NotifyCharacteristicUuid","requiresBluetooth","navigator","bluetooth","Error","availability","create","onAvailabilityChanged","observer","next","e","value","addEventListener","unsubscribed","getAvailability","then","available","unsubscribe","removeEventListener","transportsCache","BluetoothTransport","type","message","requestDevice","filters","services","descriptor","device","complete","deviceOrId","gatt","connected","connect","getPrimaryService","service","all","getCharacteristic","writeC","notifyC","notifyObservable","pipe","toString","notif","subscribe","transport","id","onDisconnect","notYetDisconnected","emit","writeCharacteristic","mtuSize","exchange","apdu","atomic","debug","msgIn","write","toPromise","data","msgOut","String","disconnect","buffer","writeValue","f","busy","resolveBusy","busyPromise","r","res","isSupported","resolve","observeAvailability","list"],"mappings":"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","file":"TransportWebBLE.js","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport, { TransportError } from \"@ledgerhq/hw-transport\";\nimport { Observable, merge } from \"rxjs\";\nimport { share, tap } from \"rxjs/operators\";\nimport { logSubject } from \"./debug\";\nimport type { Device, Characteristic } from \"./types\";\nimport { sendAPDU } from \"./sendAPDU\";\nimport { receiveAPDU } from \"./receiveAPDU\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\n\nconst ServiceUuid = \"d973f2e0-b19e-11e2-9e96-0800200c9a66\";\nconst WriteCharacteristicUuid = \"d973f2e2-b19e-11e2-9e96-0800200c9a66\";\nconst NotifyCharacteristicUuid = \"d973f2e1-b19e-11e2-9e96-0800200c9a66\";\n\nconst requiresBluetooth = () => {\n  // $FlowFixMe\n  const { bluetooth } = navigator;\n  if (typeof bluetooth === \"undefined\") {\n    throw new Error(\"web bluetooth not supported\");\n  }\n  return bluetooth;\n};\n\nconst availability = () =>\n  Observable.create(observer => {\n    const bluetooth = requiresBluetooth();\n    const onAvailabilityChanged = e => {\n      observer.next(e.value);\n    };\n    bluetooth.addEventListener(\"availabilitychanged\", onAvailabilityChanged);\n    let unsubscribed = false;\n    bluetooth.getAvailability().then(available => {\n      if (!unsubscribed) {\n        observer.next(available);\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n        bluetooth.removeEventListener(\n          \"availabilitychanged\",\n          onAvailabilityChanged\n        );\n      }\n    };\n  });\n\nconst transportsCache = {};\n\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-web-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve()\n      .then(requiresBluetooth)\n      .then(() => true, () => false);\n\n  /**\n   * TODO could add this concept in all transports\n   * observe event with { available: bool, type: string } // available is generic, type is specific\n   * an event is emit once and then each time it changes\n   */\n  static observeAvailability = (observer: *) =>\n    availability.subscribe(observer);\n\n  static list = (): * => Promise.resolve([]);\n\n  static listen(observer: *) {\n    logSubject.next({\n      type: \"verbose\",\n      message: \"listen...\"\n    });\n\n    let unsubscribed;\n\n    const bluetooth = requiresBluetooth();\n\n    bluetooth\n      .requestDevice({\n        filters: [\n          {\n            services: [ServiceUuid]\n          }\n        ]\n      })\n      .then(device => {\n        if (!unsubscribed) {\n          observer.next({ type: \"add\", descriptor: device, device });\n          observer.complete();\n        }\n      });\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  }\n\n  static async open(deviceOrId: Device | string) {\n    let device;\n    if (typeof deviceOrId === \"string\") {\n      if (transportsCache[deviceOrId]) {\n        logSubject.next({\n          type: \"verbose\",\n          message: \"Transport in cache, using that.\"\n        });\n        return transportsCache[deviceOrId];\n      }\n\n      const bluetooth = requiresBluetooth();\n\n      // TODO instead we should \"query\" the device by its ID\n      device = await bluetooth.requestDevice({\n        filters: [\n          {\n            services: [ServiceUuid]\n          }\n        ]\n      });\n    } else {\n      device = deviceOrId;\n    }\n\n    if (!device.gatt.connected) {\n      logSubject.next({\n        type: \"verbose\",\n        message: \"not connected. connecting...\"\n      });\n      await device.gatt.connect();\n    }\n\n    const service = await device.gatt.getPrimaryService(ServiceUuid);\n    const [writeC, notifyC] = await Promise.all([\n      service.getCharacteristic(WriteCharacteristicUuid),\n      service.getCharacteristic(NotifyCharacteristicUuid)\n    ]);\n\n    const notifyObservable = monitorCharacteristic(notifyC).pipe(\n      tap(value => {\n        logSubject.next({\n          type: \"ble-frame-read\",\n          message: value.toString(\"hex\")\n        });\n      }),\n      share()\n    );\n\n    const notif = notifyObservable.subscribe();\n\n    const transport = new BluetoothTransport(device, writeC, notifyObservable);\n\n    transportsCache[transport.id] = transport;\n    const onDisconnect = e => {\n      delete transportsCache[transport.id];\n      transport.notYetDisconnected = false;\n      notif.unsubscribe();\n      device.removeEventListener(\"gattserverdisconnected\", onDisconnect);\n      logSubject.next({\n        type: \"verbose\",\n        message: `BleTransport(${transport.id}) disconnected`\n      });\n      transport.emit(\"disconnect\", e);\n    };\n    device.addEventListener(\"gattserverdisconnected\", onDisconnect);\n\n    return transport;\n  }\n\n  static disconnect = async (id: *) => {\n    logSubject.next({\n      type: \"verbose\",\n      message: `user disconnect(${id})`\n    });\n    const transport = transportsCache[id];\n    if (transport) {\n      transport.device.gatt.disconnect();\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: Characteristic;\n\n  notifyObservable: Observable<Buffer>;\n\n  notYetDisconnected = true;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: Characteristic,\n    notifyObservable: Observable<*>\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n\n    logSubject.next({\n      type: \"verbose\",\n      message: `BleTransport(${String(this.id)}) new instance`\n    });\n  }\n\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.atomic(async () => {\n      try {\n        const { debug } = this;\n\n        const msgIn = apdu.toString(\"hex\");\n        if (debug) debug(`=> ${msgIn}`); // eslint-disable-line no-console\n        logSubject.next({ type: \"ble-apdu-write\", message: msgIn });\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        logSubject.next({ type: \"ble-apdu-read\", message: msgOut });\n        if (debug) debug(`<= ${msgOut}`); // eslint-disable-line no-console\n\n        return data;\n      } catch (e) {\n        logSubject.next({\n          type: \"ble-error\",\n          message: \"exchange got \" + String(e)\n        });\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          this.device.gatt.disconnect();\n        }\n        throw e;\n      }\n    });\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    logSubject.next({\n      type: \"ble-frame-write\",\n      message: buffer.toString(\"hex\")\n    });\n    await this.writeCharacteristic.writeValue(buffer);\n  };\n\n  busy: ?Promise<void>;\n  atomic = async (f: *) => {\n    if (this.busy) {\n      throw new TransportError(\"Transport race condition\", \"RaceCondition\");\n    }\n    let resolveBusy;\n    const busyPromise = new Promise(r => {\n      resolveBusy = r;\n    });\n    this.busy = busyPromise;\n    try {\n      const res = await f();\n      return res;\n    } finally {\n      if (resolveBusy) resolveBusy();\n      this.busy = null;\n    }\n  };\n\n  async close() {\n    if (this.busy) {\n      await this.busy;\n    }\n  }\n}\n"]}