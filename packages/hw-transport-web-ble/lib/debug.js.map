{"version":3,"sources":["../src/debug.js"],"names":["logSubject","Subject","id","logsObservable","pipe","String","date","Date","l","subscribe","global","__ledgerDebug","e","toISOString","type","message"],"mappings":";;;;;;;;;;;AACA;;AAEA;;;;AAYO,IAAMA,kCAAoC,IAAIC,aAAJ,EAA1C;AAbP;;;AAeA,IAAIC,KAAK,CAAT;;AAEO,IAAMC,0CAAkCH,WAAWI,IAAX,CAC7C,oBAAI;AAAA,kCAAQF,IAAIG,OAAO,EAAEH,EAAT,CAAZ,EAA0BI,MAAM,IAAIC,IAAJ,EAAhC,IAA+CC,CAA/C;AAAA,CAAJ,CAD6C,EAE7C,4BAAY,IAAZ,CAF6C,CAAxC;;AAKPL,eAAeM,SAAf,CAAyB,aAAK;AAC5B,MAAIC,OAAOC,aAAX,EAA0B;AACxBD,WAAOC,aAAP,CACEC,EAAEN,IAAF,CAAOO,WAAP,KAAuB,GAAvB,GAA6BD,EAAEE,IAA/B,GAAsC,IAAtC,GAA6CT,OAAOO,EAAEG,OAAT,CAD/C;AAGD;AACF,CAND","file":"debug.js","sourcesContent":["// @flow\nimport { Subject, Observable } from \"rxjs\";\n// $FlowFixMe\nimport { shareReplay, map } from \"rxjs/operators\";\n\nexport type LogWithoutId = {\n  type: string,\n  message?: string\n};\n\nexport type Log = {\n  id: string,\n  date: Date\n} & LogWithoutId;\n\nexport const logSubject: Subject<LogWithoutId> = new Subject();\n\nlet id = 0;\n\nexport const logsObservable: Observable<Log> = logSubject.pipe(\n  map(l => ({ id: String(++id), date: new Date(), ...l })),\n  shareReplay(1000)\n);\n\nlogsObservable.subscribe(e => {\n  if (global.__ledgerDebug) {\n    global.__ledgerDebug(\n      e.date.toISOString() + \" \" + e.type + \": \" + String(e.message)\n    );\n  }\n});\n"]}