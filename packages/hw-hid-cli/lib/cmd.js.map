{"version":3,"sources":["../src/cmd.js"],"names":["unqueueRunning","queue","length","cmd","shift","transport","exchange","res","console","log","toString","error","process","exit","unqueue","list","descriptor","Error","open","rl","on","input","split","forEach","push","Buffer","from","line","main","createInterface","stdin","output","stdout","catch","e"],"mappings":";;;;;qEAQA;AAAA;AAAA,0EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMA,cADN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEEA,iCAAiB,IAAjB;AAFF;;AAAA;AAAA,qBAIWC,MAAMC,MAJjB;AAAA;AAAA;AAAA;;AAKYC,mBALZ,GAKkBF,MAAMG,KAAN,EALlB;AAAA;AAAA,uBAMwBC,UAAUC,QAAV,CAAmBH,GAAnB,CANxB;;AAAA;AAMYI,mBANZ;;AAOMC,wBAAQC,GAAR,CAAYF,IAAIG,QAAJ,CAAa,KAAb,CAAZ;AAPN;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUIF,wBAAQG,KAAR,CAAc,2BAAd;AACAC,wBAAQC,IAAR,CAAa,CAAb;;AAXJ;AAaEb,iCAAiB,KAAjB;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANF;;AAAA,sBAMiBc,OANjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC6B,6BAAiBC,IAAjB,EAD7B;;AAAA;AAAA;AAAA;AACSC,sBADT;;AAAA,gBAEOA,UAFP;AAAA;AAAA;AAAA;;AAAA,kBAEyB,IAAIC,KAAJ,CAAU,iBAAV,CAFzB;;AAAA;AAAA;AAAA,mBAG0B,6BAAiBC,IAAjB,CAAsBF,UAAtB,CAH1B;;AAAA;AAGQX,qBAHR;AAIMJ,iBAJN,GAIc,EAJd,EAKID,cALJ,GAKqB,KALrB;;AAqBEmB,eAAGC,EAAH,CAAM,MAAN,EAAc,iBAAS;AACrBC,oBAAMC,KAAN,CAAY,IAAZ,EAAkBC,OAAlB,CAA0B;AAAA,uBAAQtB,MAAMuB,IAAN,CAAWC,OAAOC,IAAP,CAAYC,IAAZ,EAAkB,KAAlB,CAAX,CAAR;AAAA,eAA1B;AACAb;AACD,aAHD;;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAec,I;;;;;AARf;;;;AACA;;;;;;;;AAEA,IAAMT,KAAK,mBAASU,eAAT,CAAyB;AAClCR,SAAOT,QAAQkB,KADmB;AAElCC,UAAQnB,QAAQoB;AAFkB,CAAzB,CAAX;;AAgCAJ,OAAOK,KAAP,CAAa,aAAK;AAChBzB,UAAQG,KAAR,CAAcuB,CAAd;AACAtB,UAAQC,IAAR,CAAa,CAAb;AACD,CAHD","file":"cmd.js","sourcesContent":["import TransportNodeHid from \"@ledgerhq/hw-transport-node-hid\";\nimport readline from \"readline\";\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nasync function main() {\n  const [descriptor] = await TransportNodeHid.list();\n  if (!descriptor) throw new Error(\"no device found\");\n  const transport = await TransportNodeHid.open(descriptor);\n  let queue = [],\n    unqueueRunning = false;\n  async function unqueue() {\n    if (unqueueRunning) return;\n    unqueueRunning = true;\n    try {\n      while (queue.length) {\n        const cmd = queue.shift();\n        const res = await transport.exchange(cmd);\n        console.log(res.toString(\"hex\"));\n      }\n    } catch (e) {\n      console.error(\"transport.exchange failed\", e);\n      process.exit(1);\n    }\n    unqueueRunning = false;\n  }\n  rl.on(\"line\", input => {\n    input.split(\"\\n\").forEach(line => queue.push(Buffer.from(line, \"hex\")));\n    unqueue();\n  });\n}\n\nmain().catch(e => {\n  console.error(e);\n  process.exit(1);\n});\n"]}