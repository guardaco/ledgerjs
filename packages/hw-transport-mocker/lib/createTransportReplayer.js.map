{"version":3,"sources":["../src/createTransportReplayer.js"],"names":["recordStore","TransportReplayer","Promise","resolve","apdu","debug","console","log","toString","buffer","reverseExchange","error","e","reject","isSupported","list","listen","unsubscribed","setTimeout","o","next","type","descriptor","complete","unsubscribe","open"],"mappings":";;;;;;;;AACA;;;;;;;;;;;;kBAGe,UAACA,WAAD,EAAmD;AAAA,MAC1DC,iBAD0D;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAmB7C,CAAE;AAnB2C;AAAA;AAAA,8BAqBtD;AACN,eAAOC,QAAQC,OAAR,EAAP;AACD;AAvB6D;AAAA;AAAA,+BAyBrDC,IAzBqD,EAyBtB;AACtC,YAAI,KAAKC,KAAT,EAAgB;AACdC,kBAAQC,GAAR,CAAY,QAAQH,KAAKI,QAAL,CAAc,KAAd,CAApB;AACD;AACD,YAAI;AACF,cAAMC,SAAST,YAAYU,eAAZ,CAA4BN,IAA5B,CAAf;AACA,cAAI,KAAKC,KAAT,EAAgBC,QAAQK,KAAR,CAAc,QAAQF,OAAOD,QAAP,CAAgB,KAAhB,CAAtB;AAChB,iBAAON,QAAQC,OAAR,CAAgBM,MAAhB,CAAP;AACD,SAJD,CAIE,OAAOG,CAAP,EAAU;AACV,cAAI,KAAKP,KAAT,EAAgBC,QAAQK,KAAR,CAAc,QAAQC,CAAtB;AAChB,iBAAOV,QAAQW,MAAR,CAAeD,CAAf,CAAP;AACD;AACF;AArC6D;;AAAA;AAAA;;AAC1DX,mBAD0D,CAEvDa,WAFuD,GAEzC;AAAA,WAAMZ,QAAQC,OAAR,CAAgB,IAAhB,CAAN;AAAA,GAFyC;;AAC1DF,mBAD0D,CAGvDc,IAHuD,GAGhD;AAAA,WAAMb,QAAQC,OAAR,CAAgB,CAAC,IAAD,CAAhB,CAAN;AAAA,GAHgD;;AAC1DF,mBAD0D,CAIvDe,MAJuD,GAI9C,aAAK;AACnB,QAAIC,qBAAJ;AACAC,eAAW,YAAM;AACf,UAAID,YAAJ,EAAkB;AAClBE,QAAEC,IAAF,CAAO,EAAEC,MAAM,KAAR,EAAeC,YAAY,IAA3B,EAAP;AACAH,QAAEI,QAAF;AACD,KAJD,EAIG,CAJH;AAKA,WAAO;AACLC,mBAAa,uBAAM;AACjBP,uBAAe,IAAf;AACD;AAHI,KAAP;AAKD,GAhB6D;;AAC1DhB,mBAD0D,CAiBvDwB,IAjBuD,GAiBhD;AAAA,WAAMvB,QAAQC,OAAR,CAAgB,IAAIF,iBAAJ,EAAhB,CAAN;AAAA,GAjBgD;;AAuChE,SAAOA,iBAAP;AACD,C","file":"createTransportReplayer.js","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type RecordStore from \"./RecordStore\";\n\nexport default (recordStore: RecordStore): Class<Transport<*>> => {\n  class TransportReplayer extends Transport<*> {\n    static isSupported = () => Promise.resolve(true);\n    static list = () => Promise.resolve([null]);\n    static listen = o => {\n      let unsubscribed;\n      setTimeout(() => {\n        if (unsubscribed) return;\n        o.next({ type: \"add\", descriptor: null });\n        o.complete();\n      }, 0);\n      return {\n        unsubscribe: () => {\n          unsubscribed = true;\n        }\n      };\n    };\n    static open = () => Promise.resolve(new TransportReplayer());\n\n    setScrambleKey() {}\n\n    close() {\n      return Promise.resolve();\n    }\n\n    exchange(apdu: Buffer): Promise<Buffer> {\n      if (this.debug) {\n        console.log(\"=> \" + apdu.toString(\"hex\"));\n      }\n      try {\n        const buffer = recordStore.reverseExchange(apdu);\n        if (this.debug) console.error(\"<= \" + buffer.toString(\"hex\"));\n        return Promise.resolve(buffer);\n      } catch (e) {\n        if (this.debug) console.error(\"<= \" + e);\n        return Promise.reject(e);\n      }\n    }\n  }\n  return TransportReplayer;\n};\n"]}