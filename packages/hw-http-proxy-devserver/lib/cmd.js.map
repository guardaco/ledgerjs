{"version":3,"sources":["../src/cmd.js"],"names":["ifaces","networkInterfaces","ips","Object","keys","reduce","acc","ifname","concat","map","iface","family","internal","address","filter","a","PORT","process","env","app","server","createServer","wss","Server","use","get","req","res","sendStatus","pending","post","json","body","data","error","status","create","transport","exchange","Buffer","from","apduHex","close","toString","result","console","log","wsIndex","wsBusyIndex","on","index","transportP","destroyed","onClose","then","ws","send","JSON","stringify","type","message","warn","e","ip","join","listen"],"mappings":"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","file":"cmd.js","sourcesContent":["import TransportNodeHid from \"@ledgerhq/hw-transport-node-hid\";\nimport http from \"http\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport WebSocket from \"ws\";\nimport bodyParser from \"body-parser\";\nimport os from \"os\";\n\nconst ifaces = os.networkInterfaces();\nexport const ips = Object.keys(ifaces)\n  .reduce(\n    (acc, ifname) =>\n      acc.concat(\n        ifaces[ifname].map(iface => {\n          if (\"IPv4\" !== iface.family || iface.internal !== false) {\n            // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\n            return;\n          }\n          return iface.address;\n        })\n      ),\n    []\n  )\n  .filter(a => a);\n\nconst PORT = process.env.PORT || \"8435\";\n\nconst app = express();\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server });\n\napp.use(cors());\n\napp.get(\"/\", (req, res) => {\n  res.sendStatus(200);\n});\n\nlet pending = false;\napp.post(\"/\", bodyParser.json(), async (req, res) => {\n  if (!req.body) return res.sendStatus(400);\n  let data = null,\n    error = null;\n  if (pending) {\n    return res\n      .status(400)\n      .json({ error: \"an exchange query was already pending\" });\n  }\n  pending = true;\n  try {\n    const transport = await TransportNodeHid.create(5000);\n    try {\n      data = await transport.exchange(Buffer.from(req.body.apduHex, \"hex\"));\n    } finally {\n      transport.close();\n    }\n  } catch (e) {\n    error = e.toString();\n  }\n  pending = false;\n  const result = { data, error };\n  if (data) {\n    console.log(\"HTTP:\", req.body.apduHex, \"=>\", data.toString(\"hex\"));\n  } else {\n    console.log(\"HTTP:\", req.body.apduHex, \"=>\", error);\n  }\n  res.json(result);\n});\n\nlet wsIndex = 0;\nlet wsBusyIndex = 0;\n\nwss.on(\"connection\", ws => {\n  const index = ++wsIndex;\n  try {\n    let transport, transportP;\n    let destroyed = false;\n\n    const onClose = async () => {\n      if (destroyed) return;\n      destroyed = true;\n      if (wsBusyIndex === index) {\n        console.log(`WS(${index}): close`);\n        await transportP.then(transport => transport.close(), () => {});\n        wsBusyIndex = 0;\n      }\n    };\n\n    ws.on(\"close\", onClose);\n\n    ws.on(\"message\", async apduHex => {\n      if (destroyed) return;\n\n      if (apduHex === \"open\") {\n        if (wsBusyIndex) {\n          ws.send(\n            JSON.stringify({\n              error: \"WebSocket is busy (previous session not closed)\"\n            })\n          );\n          ws.close();\n          destroyed = true;\n          return;\n        }\n        transportP = TransportNodeHid.create(5000);\n        wsBusyIndex = index;\n\n        console.log(`WS(${index}): opening...`);\n        try {\n          transport = await transportP;\n          transport.on(\"disconnect\", () => ws.close());\n          console.log(`WS(${index}): opened!`);\n          ws.send(JSON.stringify({ type: \"opened\" }));\n        } catch (e) {\n          console.log(`WS(${index}): open failed! ${e}`);\n          ws.send(\n            JSON.stringify({\n              error: e.message\n            })\n          );\n          ws.close();\n        }\n        return;\n      }\n\n      if (wsBusyIndex !== index) {\n        console.warn(\"ignoring message because busy transport\");\n        return;\n      }\n\n      if (!transport) {\n        console.warn(\"received message before device was opened\");\n        return;\n      }\n      try {\n        const res = await transport.exchange(Buffer.from(apduHex, \"hex\"));\n        console.log(`WS(${index}): ${apduHex} => ${res.toString(\"hex\")}`);\n        if (destroyed) return;\n        ws.send(\n          JSON.stringify({ type: \"response\", data: res.toString(\"hex\") })\n        );\n      } catch (e) {\n        console.log(`WS(${index}): ${apduHex} =>`, e);\n        if (destroyed) return;\n        ws.send(JSON.stringify({ type: \"error\", error: e.message }));\n      }\n    });\n  } catch (e) {\n    ws.close();\n  }\n});\n\nconsole.log(\n  \"DEBUG_COMM_HTTP_PROXY=\" +\n    [\"localhost\", ...ips].map(ip => `ws://${ip}:${PORT}`).join(\"|\")\n);\n\nserver.listen(PORT, () => {\n  console.log(`\\nNano S proxy started on ${ips[0]}\\n`);\n});\n"]}